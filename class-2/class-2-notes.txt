
Class 2: web interface

  Sumary

    - Cleaning up the structure
    - React concepts
      . Component
      . JSX (JavaScript XML)
      . Properties
      . State
      . Immutability
    - Login page
    - Setting Routes
    - Setting new ONG
    - Listing incidents
    - Setting new incidents
    - Connect to the API

  Reminding:

    _omnistack-week - 3/frontend (dev) $ npm start

  Component:

    Always with Capital, otherwise doesn't work.

  Properties:

    Syntaxe looks like HTML attributes, but passed on React Components, not HTML elements.

    App.js:

      function App() {
        return (
          <Header title="Semana Omnistack" />
        );
      }

    Header.js:

      export default function Header(props) {
        return (
          <header>
            <h1>{props.title}</h1>
          </header>
        )
      }

    OR: {props.children}

        App.js:

          function App() {
            return (
              <Header>
                Semana Omnistack
              </Header>
            );
          }

        Header.js:

          export default function Header(props) {
            return (
              <header>
                <h1>{props.children}</h1>
              </header>
            )
          }

      OR: { destructuring }

        Header.js

        export default function Header({ children }) {
          return (
            <header>
              <h1>{children}</h1>
            </header>
          )
        }

  Export Default:

    As I use to see:

      export default Header; (at the bottom)

    As prof.Diego just did:

      export default function Header() {
        return (
          <header>
            <h1>Be The Hero</h1>
          </header>
        )
      }

State:

  An info that the component keeps for a period, such as user's input, something from an external api, anything that the app work over it.

  useState() is actually an array: [ value, updateFunction ]

Immutability:

  For performance purposes, we never change values directly.
  We run the update function contained inside the useState(), as we show bellow:

    function App() {

      const [counter, setCounter] = useState(0);

      function increment() {
        setCounter(counter + 1);
      }

      return (
        <div>
          <Header>
            Counter: {counter}
          </Header>
          <button onClick={increment}>Increment</button>
        </div>
      );
    }


  Emmet + VS Code + React:

    Search the settings.json file:

    ctrl or command + shift + P: settings.json:

          "emmet.syntaxProfiles": {
              "javascript": "jsx",
          },
          "emmet.includeLanguages": {
              "javascript": "javascriptreact",
          },

  Free Icons:

    https://material.io/
    https://fontawesome.com/
    https://feathericons.com/

    Getting Icon Packages from Terminal:

      npm install react-icons

    Importing it:

      import {} from 'react-icons/fi' Feather Icons
      import {} from 'react-icons/fa' Font Awesome
      import {} from 'react-icons/md' Material Design

      And so on...

      Then inside the {}, hit: ctrl + space

      It shows you all the stuff!

      Example:
      
        import { FiLogIn } from 'react-icons/fi';

      JSX:

        <FiLogIn size={16} color="#E02041" />

    
  Routes Package:
  
    Install on Terminal:

      npm install react-router-dom

  routes.js

    import React from 'react';
    import { BrowserRouter, Route, Switch } from 'react-router-dom';

    import Logon from './pages/Logon';

    export default function Routes() {
      return (
        <BrowserRouter>
          <Switch>
            <Route path="/" component={Logon} />
          </Switch>
        </BrowserRouter>
      )
    }

  
  TIP VS CODE:

    You can also add more cursors with Ctrl+Shift+L (Mac: Command+Shift+L), which will add a selection at each occurrence of the current selected text.


  OBS about braces/ curly brackets in React:

    <input style={{ width: 80 }}/>

    - The first wrapp of curly brackets means a JS code.
    - The second wrapp means an JS object.

  
  * Connecting frontend with backend

  http client:

    A http client handles requests and responses to/ from API

    At Terminal inside frontend folder, install:

      _omnistack-week - 3/frontend (dev) $ npm install axios

    Then create a folder called 'services' and 'api.js' file:

      _omnistack-week - 3/frontend/src/services/api.js

    Containing:

      import axios from 'axios';

      const api = axios.create({
        baseURL: 'http://localhost:3333',
      })

      export default api;

    
    Formatação de moedas:

      <p>{Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL'}).format(incident.value)}</p>

